#include <stdio.h>

#define MAX 50

int profits[MAX], weights[MAX], numItems;

// Function to return the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Recursive function to solve the Knapsack problem
int knapsack(int i, int capacity) {
    if (i == numItems) {
        return (weights[numItems] > capacity) ? 0 : profits[numItems];
    }
    if (weights[i] > capacity) {
        return knapsack(i + 1, capacity); // Skip the item if it exceeds capacity
    }
    // Consider both cases: exclude or include the item
    return max(knapsack(i + 1, capacity), knapsack(i + 1, capacity - weights[i]) + profits[i]);
}

int main() {
    int capacity, i, optimalSolution;

    printf("Enter the number of objects: ");
    scanf("%d", &numItems);

    printf("Enter the weights of the objects:\n");
    for (i = 1; i <= numItems; i++) {
        scanf("%d", &weights[i]);
    }

    printf("Enter the profits of the objects:\n");
    for (i = 1; i <= numItems; i++) {
        scanf("%d", &profits[i]);
    }

    printf("Enter the knapsack capacity: ");
    scanf("%d", &capacity);

    optimalSolution = knapsack(1, capacity);
    printf("The optimal solution is: %d\n", optimalSolution);

    return 0;
}
